import asyncio
import websockets
import json
import os  # ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á PORT ‡∏à‡∏≤‡∏Å environment

clients = set()

async def handler(websocket):
    clients.add(websocket)
    print(f"‚úÖ Client ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {websocket.remote_address}")
    try:
        async for message in websocket:
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô JSON
            try:
                data = json.loads(message)
                sender = data.get("from", "unknown")
                msg_text = data.get("msg", "")
            except json.JSONDecodeError:
                sender = "unknown"
                msg_text = str(message)

            print(f"üì® {sender}: {msg_text}")

            # Broadcast ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å client
            broadcast = json.dumps({"from": sender, "msg": msg_text})
            for client in clients.copy():
                try:
                    await client.send(broadcast)
                except Exception as e:
                    print(f"‚ùå Client {client.remote_address} ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
                    clients.remove(client)

    except websockets.exceptions.ConnectionClosed:
        print(f"‚ùå Client {websocket.remote_address} ‡∏õ‡∏¥‡∏î connection")
    finally:
        clients.discard(websocket)

async def main():
    # ‡∏î‡∏∂‡∏á PORT ‡∏à‡∏≤‡∏Å environment variable (Render ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ)
    port = int(os.environ.get("PORT", 9999))
    print(f"üü¢ Server ‡∏£‡∏±‡∏ô‡∏ó‡∏µ‡πà ws://0.0.0.0:{port}")
    async with websockets.serve(handler, "0.0.0.0", port):
        await asyncio.Future()  # run forever

if __name__ == "__main__":
    asyncio.run(main())
